# -*- coding: utf-8 -*-

# Copyright (c) 2016, KOL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTLICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import common as Common
import time


def MediaObjectsForURL(url):
    item = Common.InitMetaUrl(url).item
    return [
        MediaObject(
            parts=[PartObject(
                key=Callback(
                    Play,
                    oid=item['id'],
                ),
            )],
            video_resolution='sd',
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            optimized_for_streaming=True,
            audio_channels=2
        )
    ]


def MetadataObjectForURL(url):
    item = Common.InitMetaUrl(url).item
    summary = None
    if 'announce' in item:
        summary = item['announce']
    elif 'text' in item:
        summary = item['text']

    if summary:
        try:
            summary = u'%s' % HTML.ElementFromString(summary).xpath('//p')[0].text_content()
        except:
            summary = ''

    if item['start_timestamp'] > time.time():
        title = u'[%s] %s' % (
            time.strftime('%d %b, %H:%M', time.localtime(item['start_timestamp'])),
            item['name']
        )
    else:
        title = u'%s' % item['name']
    return VideoClipObject(
        title=title,
        thumb=item['fotos'][0]['foto'] if 'fotos' in item else None,
        summary=summary,
        originally_available_at=Datetime.FromTimestamp(item['start_timestamp'])
    )


@indirect
def Play(oid):

    video_url = Common.GetVideoUrl(oid)
    if not video_url:
        raise Ex.MediaNotAvailable

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(video_url))